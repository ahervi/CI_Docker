#Ce template permet la création d'une architecture OpenStack visant à déployer un système de scan 
# automatique d'image Docker.

#Quatre entités sont présentes :
# - Bastion : Machine d'administration des autres machines ;
# - Personnel : représente le personnel de l'école capable de modifier un repértoire git issu 
# de la machine gitlab ;
# - Gitlab : un serveur gitlab où aura lieu les scans avec Clair ;
# - Registre : un registre Docker qui interagira avec le serveur Gitlab.

heat_template_version: rocky

description: Projet Docker

#La clé d'accès utilisé pour se connecter en SSH au bastion
parameters:
  key:
    type: string
    description: MYKEY




resources:
#Les groupes de sécurité sont permissifs pour l'instant, ils pourront être restreints plus tard
# si le temps le permet.

  #Le groupe de sécurité du LAN interne : tout est autorisé pour l'instant.
  prod_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Open all the ports inside the production network"
      rules:
        - remote_ip_prefix: 0.0.0.0/0

  #Le groupe de sécurité vers l'extérieur : seul SSH et ICMP sont autorisés.
  external_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "allow ssh and ping from outside"
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
  
#Le sous réseaux du LAN est simple : 192.168.2.0/24
  gitlab_net:
    type: OS::Neutron::Net
    properties:
      name: "gitlab_net"

  gitlab_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: gitlab_net }
      cidr: "192.168.2.0/24"
      dns_nameservers: [ "192.44.75.10" ]
      ip_version: 4
      allocation_pools:
        - start: "192.168.2.100"
          end: "192.168.2.150"
      name: "gitlab_subnet"

  gateway_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: external
      name: "gateway_router"

  gateway_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: gateway_router}
      subnet_id: { get_resource: gitlab_subnet}

#On passe à l'adressage des machines :
# - le bastion est en 192.168.2.2 ;
# - le serveur gitlab est en 192.168.2.3 ;
# - le registre est en 192.168.2.4 ;
# - et le personnel est en 192.168.2.5.
  bastion_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: gitlab_net}
      security_groups: [ get_resource: external_security_group]
      fixed_ips:
        - subnet_id: { get_resource: gitlab_subnet}
          ip_address: 192.168.2.2

  gitlab_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: gitlab_net}
      security_groups: [ get_resource: prod_security_group]
      fixed_ips:
        - subnet_id: { get_resource: gitlab_subnet}
          ip_address: 192.168.2.3

  registry_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: gitlab_net}
      security_groups: [ get_resource: prod_security_group]
      fixed_ips:
        - subnet_id: { get_resource: gitlab_subnet}
          ip_address: 192.168.2.4

  personnel_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: gitlab_net}
      security_groups: [ get_resource: prod_security_group]
      fixed_ips:
        - subnet_id: { get_resource: gitlab_subnet}
          ip_address: 192.168.2.5

#Toutes les machines sont des petites instances m1.small sauf le serveur gitlab qui est plus
# volumineux m1.xlarge (gitlab est très gourmand).
  bastion:
    type: OS::Nova::Server
    properties:
      name: bastion
      image: ubuntu_18_current
      flavor: m1.small
      key_name: { get_param: key}
      networks:
        - port: { get_resource: bastion_port }
      user_data: |
        #!/bin/bash

        #On fait pointer l'IP attribuée au nom d'hôte attribué.

        export IP=$(ip addr show ens3 | grep -Po 'inet \K[\d.]+')
        export HOSTNAME=`hostname`
        tee -a /etc/hosts <<EOF
        $IP $HOSTNAME
        EOF

        #On met des variables d'environnement pour que ce script puisse s'exécuter
        # avec les serveurs proxy de l'école.

        export DEBIAN_FRONTEND=noninteractive
        export TERM="xterm"
        export use_proxy=yes
        export http_proxy="http://proxy.enst-bretagne.fr:8080"
        export https_proxy="http://proxy.enst-bretagne.fr:8080"

        #On ne met pas de proxy sur 192.168.2.3 car on veut avoir accès au serveur
        # gitlab sans se faire rediriger par le proxy

        export no_proxy=localhost,127.0.0.1,192.168.2.3

        #On rend certaines variables persistantes. 

        echo 'Acquire::http::Proxy "http://apt-cacher-01.priv.enst-bretagne.fr:3142";' > /etc/apt/apt.conf.d/01proxy
        localectl set-locale LANG=en_US.UTF-8 LANGUAGE="en_US:en"
        echo "http_proxy=http://proxy.enst-bretagne.fr:8080" >>   /etc/environment
        echo "https_proxy=http://proxy.enst-bretagne.fr:8080 " >>   /etc/environment
        echo "no_proxy=localhost,127.0.0.1,192.168.2.3 " >>   /etc/environment

        #On met à jour la liste des paquets du système.
        apt-get -y update
        reboot

  gitlab:
    type: OS::Nova::Server
    properties:
      name: projetindu
      image: ubuntu_18_current
      flavor: m1.xlarge
      key_name: { get_param: key}
      networks:
        - port: { get_resource: gitlab_port }
      user_data: |
        #!/bin/bash

        #On fait pointer l'IP attribuée au nom d'hôte attribué.

        export IP=$(ip addr show ens3 | grep -Po 'inet \K[\d.]+')
        export HOSTNAME=`hostname`
        tee -a /etc/hosts <<EOF
        $IP $HOSTNAME
        EOF

        #On met des variables d'environnement pour que ce script puisse s'exécuter avec les serveurs proxy de l'école.

        export DEBIAN_FRONTEND=noninteractive
        export TERM="xterm"
        export use_proxy=yes
        export http_proxy="http://proxy.enst-bretagne.fr:8080"
        export https_proxy="http://proxy.enst-bretagne.fr:8080"
        echo 'Acquire::http::Proxy "http://apt-cacher-01.priv.enst-bretagne.fr:3142";' > /etc/apt/apt.conf.d/01proxy

        #On ne met pas de proxy sur 192.168.2.3 car on veut avoir accès au serveur
        # gitlab sans se faire rediriger par le proxy

        export no_proxy=localhost,127.0.0.1,192.168.2.3,projetindu

        #On rend certaines variables persistantes. 

        localectl set-locale LANG=en_US.UTF-8 LANGUAGE="en_US:en"
        echo "use_proxy=yes" >> /etc/environment
        echo "http_proxy=http://proxy.enst-bretagne.fr:8080" >>   /etc/environment
        echo "https_proxy=http://proxy.enst-bretagne.fr:8080 " >>   /etc/environment
        echo "no_proxy=localhost,127.0.0.1,192.168.2.3,projetindu " >>   /etc/environment
        echo "DEBIAN_FRONTEND=noninteractive " >>   /etc/environment
        echo "TERM="xterm"" >>   /etc/environment
        
        # On configure Docker pour pouvoir pull des images depuis l'extérieur et
        # on ajoute 192.168.2.4 (le registre) en insecure pour ne pas avoir à vérifier son certificat.

        mkdir -p /etc/systemd/system/docker.service.d
        echo "[Service]" > /etc/systemd/system/docker.service.d/proxy.conf
        echo "Environment='HTTPS_PROXY=http://proxy.enst-bretagne.fr:8080' 'HTTP_PROXY=http://proxy.enst-bretagne.fr:8080'" >> /etc/systemd/system/docker.service.d/proxy.conf
        echo "Environment='NO_PROXY=localhost,127.0.0.0/8,192.168.2.4'" >> /etc/systemd/system/docker.service.d/proxy.conf
        systemctl daemon-reload
        mkdir /etc/docker/
        echo '{' > /etc/docker/daemon.json
        echo '    "dns": ["192.44.75.10", "192.108.115.2"],"insecure-registries":["192.168.2.4:5000"]' >> /etc/docker/daemon.json
        echo '}' >> /etc/docker/daemon.json

        #On met à jour la liste des paquets du système.

        apt-get -y update
        reboot
  
  registry:
    type: OS::Nova::Server
    properties:
      name: registry
      image: ubuntu_18_current
      flavor: m1.small
      key_name: { get_param: key}
      networks:
        - port: { get_resource: registry_port }
      user_data: |
        #!/bin/bash

        #On fait pointer l'IP attribuée au nom d'hôte attribué.

        export IP=$(ip addr show ens3 | grep -Po 'inet \K[\d.]+')
        export HOSTNAME=`hostname`
        tee -a /etc/hosts <<EOF
        $IP $HOSTNAME
        EOF

        #On met des variables d'environnement pour que ce script puisse s'exécuter avec les serveurs proxy de l'école.

        export DEBIAN_FRONTEND=noninteractive
        export TERM="xterm"
        export use_proxy=yes
        export http_proxy="http://proxy.enst-bretagne.fr:8080"
        export https_proxy="http://proxy.enst-bretagne.fr:8080"
        
        #On ne met pas de proxy sur 192.168.2.3 car on veut avoir accès au serveur
        # gitlab sans se faire rediriger par le proxy

        export no_proxy=localhost,127.0.0.1,192.168.2.3
        
        #On rend certaines variables persistantes. 

        echo 'Acquire::http::Proxy "http://apt-cacher-01.priv.enst-bretagne.fr:3142";' > /etc/apt/apt.conf.d/01proxy
        localectl set-locale LANG=en_US.UTF-8 LANGUAGE="en_US:en"
        echo "use_proxy=yes" >> /etc/environment
        echo "http_proxy=http://proxy.enst-bretagne.fr:8080" >>   /etc/environment
        echo "https_proxy=http://proxy.enst-bretagne.fr:8080 " >>   /etc/environment
        echo "no_proxy=localhost,127.0.0.1,192.168.2.3 " >>   /etc/environment

        # On configure Docker pour pouvoir pull des images depuis l'extérieur et
        # on ajoute 192.168.2.4 (le registre) en insecure pour ne pas avoir à vérifier son certificat.
        
        mkdir -p /etc/systemd/system/docker.service.d
        echo "[Service]" > /etc/systemd/system/docker.service.d/proxy.conf
        echo "Environment='HTTPS_PROXY=http://proxy.enst-bretagne.fr:8080' 'HTTP_PROXY=http://proxy.enst-bretagne.fr:8080'" >> /etc/systemd/system/docker.service.d/proxy.conf
        echo "Environment='NO_PROXY=localhost,127.0.0.0/8,192.168.2.4'" >> /etc/systemd/system/docker.service.d/proxy.conf
        systemctl daemon-reload
        mkdir /etc/docker/
        echo '{' > /etc/docker/daemon.json
        echo '    "dns": ["192.44.75.10", "192.108.115.2"],"insecure-registries":["192.168.2.4:5000"]' >> /etc/docker/daemon.json
        echo '}' >> /etc/docker/daemon.json
        
        #On met à jour la liste des paquets du système.

        apt-get -y update
        reboot

  personnel:
    type: OS::Nova::Server
    properties:
      name: personnel
      image: ubuntu_18_current
      flavor: m1.small
      key_name: { get_param: key}
      networks:
        - port: { get_resource: personnel_port }
      user_data: |
        #!/bin/bash
        
        #On fait pointer l'IP attribuée au nom d'hôte attribué.

        export IP=$(ip addr show ens3 | grep -Po 'inet \K[\d.]+')
        export HOSTNAME=`hostname`
        tee -a /etc/hosts <<EOF
        $IP $HOSTNAME
        EOF
        
        #On met des variables d'environnement pour que ce script puisse s'exécuter avec les serveurs proxy de l'école.

        export DEBIAN_FRONTEND=noninteractive
        export TERM="xterm"
        export use_proxy=yes
        export http_proxy="http://proxy.enst-bretagne.fr:8080"
        export https_proxy="http://proxy.enst-bretagne.fr:8080"
        export no_proxy=localhost,127.0.0.1,192.168.2.3
        
        #On rend certaines variables persistantes. 

        echo 'Acquire::http::Proxy "http://apt-cacher-01.priv.enst-bretagne.fr:3142";' > /etc/apt/apt.conf.d/01proxy
        localectl set-locale LANG=en_US.UTF-8 LANGUAGE="en_US:en"
        echo "use_proxy=yes" >> /etc/environment
        echo "http_proxy=http://proxy.enst-bretagne.fr:8080" >>   /etc/environment
        echo "https_proxy=http://proxy.enst-bretagne.fr:8080 " >>   /etc/environment
        echo "no_proxy=localhost,127.0.0.1,192.168.2.3 " >>   /etc/environment
        

        # On configure Docker pour pouvoir pull des images depuis l'extérieur et
        # on ajoute 192.168.2.4 (le registre) en insecure pour ne pas avoir à vérifier son certificat.

        mkdir -p /etc/systemd/system/docker.service.d
        echo "[Service]" > /etc/systemd/system/docker.service.d/proxy.conf
        echo "Environment='HTTPS_PROXY=http://proxy.enst-bretagne.fr:8080' 'HTTP_PROXY=http://proxy.enst-bretagne.fr:8080'" >> /etc/systemd/system/docker.service.d/proxy.conf
        echo "Environment='NO_PROXY=localhost,127.0.0.0/8,192.168.2.4'" >> /etc/systemd/system/docker.service.d/proxy.conf        
        systemctl daemon-reload
        mkdir /etc/docker/
        echo '{' > /etc/docker/daemon.json
        echo '    "dns": ["192.44.75.10", "192.108.115.2"],"insecure-registries":["192.168.2.4:5000"]' >> /etc/docker/daemon.json
        echo '}' >> /etc/docker/daemon.json

        #On met à jour la liste des paquets du système.

        apt-get -y update
        reboot



#On configure deux associations vers des IP floattantes (on en peut pas créer d'IP flottantes)
  
  #IP flottante pour se connecter au bastion en ssh depuis l'extérieur.
  association_ssh:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: d8045f4a-b77d-474d-a430-bf9ec76c3553
      port_id: { get_resource: bastion_port }
  
  #IP flottante pour accéder à l'interface graphique de Gitlab depuis l'extérieur.
  association_gitlab:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: eef94fcc-a9c9-441a-a209-8d5fe1b8af64
      port_id: { get_resource: gitlab_port }
